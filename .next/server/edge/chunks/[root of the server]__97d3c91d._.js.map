{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 23, "column": 0}, "map": {"version":3,"sources":["turbopack:///[project]/src/config/authConstants.ts"],"sourcesContent":["\nexport const SESSION_TOKEN_COOKIE_NAME = 'smartdvm-user-session'; // Client-readable cookie with user object\nexport const HTTP_ONLY_SESSION_TOKEN_COOKIE_NAME = 'session_token'; // Server-set HttpOnly cookie (session ID)\nexport const SESSION_MAX_AGE_SECONDS = 60 * 60 * 24 * 7; // 7 days in seconds\n"],"names":[],"mappings":";;;;;AACO,MAAM,4BAA4B,yBAAyB,0CAA0C;AACrG,MAAM,sCAAsC,iBAAiB,0CAA0C;AACvG,MAAM,0BAA0B,KAAK,KAAK,KAAK,GAAG,oBAAoB"}},
    {"offset": {"line": 37, "column": 0}, "map": {"version":3,"sources":["turbopack:///[project]/src/middleware.ts"],"sourcesContent":["\nimport { NextResponse } from 'next/server';\nimport type { NextRequest } from 'next/server';\nimport { SESSION_TOKEN_COOKIE_NAME, HTTP_ONLY_SESSION_TOKEN_COOKIE_NAME } from '@/config/authConstants';\nimport type { User } from '@/context/UserContext'; // Use User types from UserContext\n\nconst AUTH_PAGE = '/auth/login';\nconst ACCESS_DENIED_PAGE = '/access-denied';\n\n// Define dashboard paths\nconst CLIENT_DASHBOARD = '/client';\nconst ADMINISTRATOR_DASHBOARD = '/administrator';\nconst PRACTICE_ADMIN_DASHBOARD = '/practice-administrator';\n\n// Other protected routes (relevant for access control, not initial login redirect)\nconst OTHER_CLIENT_PROTECTED_ROUTES = ['/favorites', '/symptom-checker'];\n\nexport async function middleware(request: NextRequest) {\n  const { pathname } = request.nextUrl;\n  const httpOnlySessionToken = request.cookies.get(HTTP_ONLY_SESSION_TOKEN_COOKIE_NAME)?.value;\n  const clientUserSessionCookie = request.cookies.get(SESSION_TOKEN_COOKIE_NAME)?.value;\n\n  let userFromClientCookie: User | null = null;\n  let isClientCookieValid = false;\n\n  if (clientUserSessionCookie) {\n    try {\n      const parsedUser = JSON.parse(clientUserSessionCookie) as User;\n      if (parsedUser && parsedUser.id && parsedUser.role) {\n        userFromClientCookie = parsedUser;\n        isClientCookieValid = true;\n      } else {\n        console.warn('[Middleware] Invalid user object in client session cookie.');\n      }\n    } catch (error) {\n      console.error('[Middleware] Failed to parse client session cookie:', error);\n    }\n  }\n\n  const isServerAuthenticated = !!httpOnlySessionToken;\n  console.log(`[Middleware] Path: ${pathname}, ServerAuth: ${isServerAuthenticated}, ClientCookieValid: ${isClientCookieValid}, UserRole: ${userFromClientCookie?.role}`);\n\n  // 1. Handle /auth or /auth/ redirect to /auth/login\n  if (pathname === '/auth' || pathname === '/auth/') {\n    console.log('[Middleware] Path is /auth or /auth/, redirecting to /auth/login');\n    return NextResponse.redirect(new URL(AUTH_PAGE, request.url));\n  }\n\n  // 2. Handle the login page itself\n  if (pathname === AUTH_PAGE) {\n    if (isServerAuthenticated && isClientCookieValid && userFromClientCookie) {\n      console.log(`[Middleware] Authenticated user (${userFromClientCookie.email}) on auth page. Allowing request for client-side redirect from UserContext.`);\n      // UserContext will handle redirecting away from login if authenticated\n    }\n    return NextResponse.next();\n  }\n\n  // 3. Handle the access denied page itself\n  if (pathname === ACCESS_DENIED_PAGE) {\n    return NextResponse.next();\n  }\n\n  // 4. Handle root path ('/')\n  if (pathname === '/') {\n    if (!isServerAuthenticated) { // Unauthenticated users go to login\n      console.log(`[Middleware] Unauthenticated user on root path. Redirecting to login.`);\n      return NextResponse.redirect(new URL(AUTH_PAGE, request.url));\n    }\n    // Authenticated users get redirected to their specific dashboards from root\n    if (isClientCookieValid && userFromClientCookie) {\n        const userRole = userFromClientCookie.role;\n        console.log(`[Middleware] Authenticated user (${userFromClientCookie.email} - ${userRole}) on root path. Redirecting to their dashboard.`);\n        if (userRole === 'ADMINISTRATOR') return NextResponse.redirect(new URL(ADMINISTRATOR_DASHBOARD, request.url));\n        if (userRole === 'PRACTICE_ADMINISTRATOR') return NextResponse.redirect(new URL(PRACTICE_ADMIN_DASHBOARD, request.url));\n        if (userRole === 'CLIENT') return NextResponse.redirect(new URL(CLIENT_DASHBOARD, request.url));\n        // Fallback for unknown role\n        console.warn(`[Middleware] Unknown role ${userRole} for authenticated user on root path. Redirecting to ${ACCESS_DENIED_PAGE}.`);\n        return NextResponse.redirect(new URL(ACCESS_DENIED_PAGE, request.url));\n    }\n    // If server authenticated but client cookie is pending/invalid, let UserContext handle it on client for /\n    // This allows UserContext to fetch user details via /api/auth/me\n    console.log(`[Middleware] Server-authenticated user on root path, client cookie pending. Allowing request for UserContext to resolve.`);\n    return NextResponse.next();\n  }\n\n  // 5. Handle other explicitly protected paths\n  const isClientDashboard = pathname.startsWith(CLIENT_DASHBOARD);\n  const isAdminDashboard = pathname.startsWith(ADMINISTRATOR_DASHBOARD);\n  const isPracticeAdminDashboard = pathname.startsWith(PRACTICE_ADMIN_DASHBOARD);\n  const isOtherClientRoute = OTHER_CLIENT_PROTECTED_ROUTES.some(route => pathname.startsWith(route));\n  const isExplicitlyProtectedPath = isClientDashboard || isAdminDashboard || isPracticeAdminDashboard || isOtherClientRoute;\n\n  if (isExplicitlyProtectedPath) {\n    if (!isServerAuthenticated) {\n      const loginUrl = new URL(AUTH_PAGE, request.url);\n      loginUrl.searchParams.set('callbackUrl', pathname + request.nextUrl.search);\n      console.log(`[Middleware] No server session token for protected page (${pathname}), redirecting to login.`);\n      return NextResponse.redirect(loginUrl);\n    }\n\n    // Server session token exists. Now check if we have client cookie for role-based authorization.\n    if (!isClientCookieValid || !userFromClientCookie) {\n      // Server session token exists, but client cookie (with role) is missing/invalid.\n      // Allow the request to proceed. UserContext on the page will call /api/auth/me.\n      // If /api/auth/me fails, UserContext will redirect to login.\n      // If /api/auth/me succeeds, UserContext populates, and client-side role checks occur.\n      console.warn(`[Middleware] Server session token exists, but client cookie missing/invalid for protected page (${pathname}). Allowing request to proceed for UserContext to handle.`);\n      return NextResponse.next();\n    }\n\n    // Both server session token and client user details are available. Perform role-based access control.\n    const userRole = userFromClientCookie.role;\n    if (userRole === 'CLIENT') {\n      if (isAdminDashboard || isPracticeAdminDashboard) {\n        console.log(`[Middleware] Client (${userFromClientCookie.email}) attempting restricted dashboard (${pathname}). Redirecting to ${ACCESS_DENIED_PAGE}.`);\n        return NextResponse.redirect(new URL(ACCESS_DENIED_PAGE, request.url));\n      }\n    } else if (userRole === 'ADMINISTRATOR') {\n      if (isClientDashboard || isPracticeAdminDashboard || isOtherClientRoute) {\n        console.log(`[Middleware] Administrator (${userFromClientCookie.email}) attempting restricted page (${pathname}). Redirecting to ${ACCESS_DENIED_PAGE}.`);\n        return NextResponse.redirect(new URL(ACCESS_DENIED_PAGE, request.url));\n      }\n    } else if (userRole === 'PRACTICE_ADMINISTRATOR') {\n      if (isClientDashboard || isAdminDashboard || isOtherClientRoute) {\n        console.log(`[Middleware] Practice Admin (${userFromClientCookie.email}) attempting restricted page (${pathname}). Redirecting to ${ACCESS_DENIED_PAGE}.`);\n        return NextResponse.redirect(new URL(ACCESS_DENIED_PAGE, request.url));\n      }\n    } else {\n        console.warn(`[Middleware] Unknown role in client cookie: ${userRole} for protected path ${pathname}. Redirecting to ${ACCESS_DENIED_PAGE}.`);\n        return NextResponse.redirect(new URL(ACCESS_DENIED_PAGE, request.url));\n    }\n  }\n\n  // If path is not explicitly protected and not login/denied, allow it.\n  console.log(`[Middleware] Path ${pathname} not explicitly handled by auth checks. Allowing request.`);\n  return NextResponse.next();\n}\n\nexport const config = {\n  matcher: [\n    // Apply middleware to all paths except API routes, static files, images, etc.\n    '/((?!api|_next/static|_next/image|favicon.ico|manifest.json|robots.txt|assets|images|.*\\\\.(?:png|jpg|jpeg|gif|svg)$).*)',\n  ],\n};\n"],"names":[],"mappings":"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"}}]
}