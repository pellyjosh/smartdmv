{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 22, "column": 0}, "map": {"version":3,"sources":["turbopack:///[project]/src/middleware.ts"],"sourcesContent":["\n// import { NextResponse } from 'next/server';\n// import type { NextRequest } from 'next/server';\n// import { SESSION_TOKEN_COOKIE_NAME, HTTP_ONLY_SESSION_TOKEN_COOKIE_NAME } from '@/config/authConstants';\n// import type { User } from '@/context/UserContext'; // Use User types from UserContext\n\n// const AUTH_PAGE = '/auth/login';\n\n// // Define dashboard paths\n// const CLIENT_DASHBOARD = '/client';\n// const ADMINISTRATOR_DASHBOARD = '/administrator';\n// const PRACTICE_ADMIN_DASHBOARD = '/practice-administrator';\n\n// // Other protected routes\n// const OTHER_CLIENT_PROTECTED_ROUTES = ['/favorites', '/symptom-checker']; \n\n// export async function middleware(request: NextRequest) {\n//   const { pathname } = request.nextUrl;\n//   const httpOnlySessionToken = request.cookies.get(HTTP_ONLY_SESSION_TOKEN_COOKIE_NAME)?.value;\n//   const clientUserSessionCookie = request.cookies.get(SESSION_TOKEN_COOKIE_NAME)?.value;\n\n//   let userFromClientCookie: User | null = null;\n//   let isClientCookieValid = false;\n\n//   if (clientUserSessionCookie) {\n//     try {\n//       const parsedUser = JSON.parse(clientUserSessionCookie) as User;\n//       if (parsedUser && parsedUser.id && parsedUser.role) {\n//         userFromClientCookie = parsedUser;\n//         isClientCookieValid = true;\n//       } else {\n//         console.warn('[Middleware] Invalid user object in client session cookie.');\n//       }\n//     } catch (error) {\n//       console.error('[Middleware] Failed to parse client session cookie:', error);\n//     }\n//   }\n  \n//   const isServerAuthenticated = !!httpOnlySessionToken; \n\n//   if (pathname === AUTH_PAGE) {\n//     if (isServerAuthenticated && isClientCookieValid && userFromClientCookie) {\n//       let redirectTo = '/'; \n//       if (userFromClientCookie.role === 'ADMINISTRATOR') redirectTo = ADMINISTRATOR_DASHBOARD;\n//       else if (userFromClientCookie.role === 'PRACTICE_ADMINISTRATOR') redirectTo = PRACTICE_ADMIN_DASHBOARD;\n//       else if (userFromClientCookie.role === 'CLIENT') redirectTo = CLIENT_DASHBOARD;\n//       console.log(`[Middleware] Authenticated user (${userFromClientCookie.email} - ${userFromClientCookie.role}) on auth page, redirecting to ${redirectTo}`);\n//       return NextResponse.redirect(new URL(redirectTo, request.url));\n//     }\n//     return NextResponse.next();\n//   }\n\n//   const isClientDashboard = pathname === CLIENT_DASHBOARD;\n//   const isAdminDashboard = pathname === ADMINISTRATOR_DASHBOARD;\n//   const isPracticeAdminDashboard = pathname === PRACTICE_ADMIN_DASHBOARD;\n//   const isOtherClientRoute = OTHER_CLIENT_PROTECTED_ROUTES.some(route => pathname.startsWith(route));\n//   const isProtectedPath = isClientDashboard || isAdminDashboard || isPracticeAdminDashboard || isOtherClientRoute;\n\n//   if (isProtectedPath) {\n//     if (!isServerAuthenticated) {\n//       const loginUrl = new URL(AUTH_PAGE, request.url);\n//       loginUrl.searchParams.set('callbackUrl', pathname + request.nextUrl.search);\n//       console.log(`[Middleware] No server session token for protected page (${pathname}), redirecting to login.`);\n//       return NextResponse.redirect(loginUrl);\n//     }\n\n//     if (!isClientCookieValid || !userFromClientCookie) {\n//       // Server session exists, but client cookie for role check is missing/invalid.\n//       // This could lead to a loop if UserProvider hasn't hydrated yet.\n//       // For now, we will redirect to login if role info isn't available for authorization.\n//       // A more sophisticated approach might involve a \"session check\" page or an API call here,\n//       // but that adds complexity.\n//       console.warn(`[Middleware] Server session token exists, but client cookie missing/invalid for protected page (${pathname}). Attempting to allow UserProvider to load or redirecting to login.`);\n//        const loginUrl = new URL(AUTH_PAGE, request.url);\n//        loginUrl.searchParams.set('callbackUrl', pathname + request.nextUrl.search);\n//        return NextResponse.redirect(loginUrl);\n//     }\n\n//     // Both server session and client user details are available. Perform role-based access control.\n//     const userRole = userFromClientCookie.role;\n//     if (userRole === 'CLIENT') {\n//       if (isAdminDashboard || isPracticeAdminDashboard) {\n//         console.log(`[Middleware] Client (${userFromClientCookie.email}) attempting restricted dashboard (${pathname}). Redirecting to client dashboard.`);\n//         return NextResponse.redirect(new URL(CLIENT_DASHBOARD, request.url));\n//       }\n//     } else if (userRole === 'ADMINISTRATOR') {\n//       if (isClientDashboard || isPracticeAdminDashboard || isOtherClientRoute) {\n//         console.log(`[Middleware] Administrator (${userFromClientCookie.email}) attempting restricted page (${pathname}). Redirecting to admin dashboard.`);\n//         return NextResponse.redirect(new URL(ADMINISTRATOR_DASHBOARD, request.url));\n//       }\n//     } else if (userRole === 'PRACTICE_ADMINISTRATOR') {\n//       if (isClientDashboard || isAdminDashboard || isOtherClientRoute) {\n//         console.log(`[Middleware] Practice Admin (${userFromClientCookie.email}) attempting restricted page (${pathname}). Redirecting to practice admin dashboard.`);\n//         return NextResponse.redirect(new URL(PRACTICE_ADMIN_DASHBOARD, request.url));\n//       }\n//     } else {\n//         // Unknown role in client cookie, treat as unauthorized for protected paths\n//         console.warn(`[Middleware] Unknown role in client cookie: ${userRole}. Redirecting to login.`);\n//         const loginUrl = new URL(AUTH_PAGE, request.url);\n//         loginUrl.searchParams.set('callbackUrl', pathname + request.nextUrl.search);\n//         return NextResponse.redirect(loginUrl);\n//     }\n//   }\n\n//   return NextResponse.next();\n// }\n\n// export const config = {\n//   matcher: [\n//     '/((?!api|_next/static|_next/image|favicon.ico|manifest.json|robots.txt|assets|images|.*\\\\.(?:png|jpg|jpeg|gif|svg)$).*)',\n//   ],\n// };\n"],"names":[],"mappings":"AACA,8CAA8C;AAC9C,kDAAkD;AAClD,2GAA2G;AAC3G,wFAAwF;AAExF,mCAAmC;AAEnC,4BAA4B;AAC5B,sCAAsC;AACtC,oDAAoD;AACpD,8DAA8D;AAE9D,4BAA4B;AAC5B,6EAA6E;AAE7E,2DAA2D;AAC3D,0CAA0C;AAC1C,kGAAkG;AAClG,2FAA2F;AAE3F,kDAAkD;AAClD,qCAAqC;AAErC,mCAAmC;AACnC,YAAY;AACZ,wEAAwE;AACxE,8DAA8D;AAC9D,6CAA6C;AAC7C,sCAAsC;AACtC,iBAAiB;AACjB,sFAAsF;AACtF,UAAU;AACV,wBAAwB;AACxB,qFAAqF;AACrF,QAAQ;AACR,MAAM;AAEN,2DAA2D;AAE3D,kCAAkC;AAClC,kFAAkF;AAClF,+BAA+B;AAC/B,iGAAiG;AACjG,gHAAgH;AAChH,wFAAwF;AACxF,kKAAkK;AAClK,wEAAwE;AACxE,QAAQ;AACR,kCAAkC;AAClC,MAAM;AAEN,6DAA6D;AAC7D,mEAAmE;AACnE,4EAA4E;AAC5E,wGAAwG;AACxG,qHAAqH;AAErH,2BAA2B;AAC3B,oCAAoC;AACpC,0DAA0D;AAC1D,qFAAqF;AACrF,qHAAqH;AACrH,gDAAgD;AAChD,QAAQ;AAER,2DAA2D;AAC3D,uFAAuF;AACvF,0EAA0E;AAC1E,8FAA8F;AAC9F,mGAAmG;AACnG,qCAAqC;AACrC,yMAAyM;AACzM,2DAA2D;AAC3D,sFAAsF;AACtF,iDAAiD;AACjD,QAAQ;AAER,uGAAuG;AACvG,kDAAkD;AAClD,mCAAmC;AACnC,4DAA4D;AAC5D,8JAA8J;AAC9J,gFAAgF;AAChF,UAAU;AACV,iDAAiD;AACjD,mFAAmF;AACnF,+JAA+J;AAC/J,uFAAuF;AACvF,UAAU;AACV,0DAA0D;AAC1D,2EAA2E;AAC3E,yKAAyK;AACzK,wFAAwF;AACxF,UAAU;AACV,eAAe;AACf,sFAAsF;AACtF,0GAA0G;AAC1G,4DAA4D;AAC5D,uFAAuF;AACvF,kDAAkD;AAClD,QAAQ;AACR,MAAM;AAEN,gCAAgC;AAChC,IAAI;AAEJ,0BAA0B;AAC1B,eAAe;AACf,iIAAiI;AACjI,OAAO;AACP,KAAK"}}]
}